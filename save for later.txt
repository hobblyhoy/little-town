POC for clicking on directional pieces               
			   <polygon
                  className="st40"
                  points="449.1,1462.24 454.7,1465.46 409.95,1491.31 404.35,1488.08 370.79,1468.7 365.2,1465.47 409.95,1439.64 415.54,1442.86 "
                  id="polygon6060"
                  onClick={(e: React.MouseEvent<SVGElement, MouseEvent>) => {
                     const svgElement = e.currentTarget as SVGGraphicsElement;
                     const boundingRect = svgElement.getBoundingClientRect();

                     const topLeft: { x: number; y: number } = {
                        x: boundingRect.left,
                        y: boundingRect.top,
                     };

                     const mousePosition: { x: number; y: number } = {
                        x: e.clientX,
                        y: e.clientY,
                     };

                     if (mousePosition.x < topLeft.x + boundingRect.width / 2) {
                        console.log('left');
                     } else {
                        console.log('right');
                     }

                     if (mousePosition.y < topLeft.y + boundingRect.height / 2) {
                        console.log('top');
                     } else {
                        console.log('bottom');
                     }
                  }}
               />
			   
Making the blocks dim on hover (gets applied to the first <g> element of the SVG
   const gCss = css`
      pointer-events: visiblePainted;

      opacity: 1;
      transition: opacity 0.3s ease-in-out;

      &:hover {
         opacity: 0.75;
         transition: none;
      }
   `;
   
// For manual testing of my sorting function
const tiles: { [key: string]: IBoardStateTile } = {
   '2-0-0': { isoX: 2, isoY: 0, isoZ: 0, type: 'tile', tileType: 'grass', key: '2-0-0' },
   '2-2-0': { isoX: 2, isoY: 2, isoZ: 0, type: 'tile', tileType: 'grass', key: '2-2-0' },
   '1-0-0': { isoX: 1, isoY: 0, isoZ: 0, type: 'tile', tileType: 'grass', key: '1-0-0' },
   '0-0-0': { isoX: 0, isoY: 0, isoZ: 0, type: 'tile', tileType: 'grass', key: '0-0-0' },
   '2-1-0': { isoX: 2, isoY: 1, isoZ: 0, type: 'tile', tileType: 'grass', key: '2-1-0' },
   '0-2-0': { isoX: 0, isoY: 2, isoZ: 0, type: 'tile', tileType: 'grass', key: '0-2-0' },
   '0-1-0': { isoX: 0, isoY: 1, isoZ: 0, type: 'tile', tileType: 'grass', key: '0-1-0' },
   '1-1-0': { isoX: 1, isoY: 1, isoZ: 0, type: 'tile', tileType: 'grass', key: '1-1-0' },
   '1-2-0': { isoX: 1, isoY: 2, isoZ: 0, type: 'tile', tileType: 'grass', key: '1-2-0' },
};   


Building a new tile from scratch
         const key = generateInternalKey({isoX: action.payload.isoX, isoY: action.payload.isoY, isoZ: 0});
         const newTile:IBoardStateTile = {
            isoX: action.payload.isoX,
            isoY: action.payload.isoY,
            isoZ: 0,
            type: 'tile',
            tileType: action.payload.tileType,
            key,
            cellUpperLeft: null,
            cellUpperRight: null,
            cellLowerLeft: null,
            cellLowerRight: null,
            cellAbove: null,
         }

         updateBoardTileWithCellNeighborData(state.boardTiles, newTile);

         state.boardTiles[key] = newTile;
		 
   const gameBoardScrollOffsetCss = css`
      transform: translate(${scrollOffset.offsetX}px, ${scrollOffset.offsetY}px);
   `;		 
   
   useEffect(() => {
      console.log('scrollOffset - ' + scrollOffset.offsetX + ' ' + scrollOffset.offsetY);
   }, [scrollOffset]);